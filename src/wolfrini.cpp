#include "wolfrini.hpp"
#include <algorithm>
#include <iostream>
#include "parsetools.hpp"

namespace WINI
{
auto INISection::getKeyValuePair(const std::string &keyName)
{
    return std::find_if(data.begin(), data.end(),
                        [&keyName](const auto &kv) -> bool {
                            if (kv.key == keyName)
                                return true;
                            return false;
                        });
}
const auto INISection::getKeyValuePair(const std::string &keyName) const
{
    return std::find_if(data.begin(), data.end(),
                        [&keyName](const auto &kv) -> bool {
                            if (kv.key == keyName)
                                return true;
                            return false;
                        });
}
INISection::INISection(const std::string &iniCode)
{
    sectionName = findSectionName(iniCode);
}
std::string INISection::getValue(const std::string &keyName) const
{
    return getKeyValuePair(keyName)->value;
}
void INISection::removeKeyValuePair(const std::string &keyName)
{
    data.erase(getKeyValuePair(keyName));
}
void INISection::setValue(const std::string &keyName, const std::string &newValue)
{
    getKeyValuePair(keyName)->value = newValue;
}
std::string INISection::getAsINI() const
{
    std::string temporary = "[" + sectionName + "]\n";
    for (const auto &i : data)
        std::cout << i.key << "=" << i.value << "\n";
}
std::string INISection::getSectionName() const
{
    return sectionName;
}
void INISection::addKeyValuePair(std::string &key_, std::string &value_)
{
    KeyValuePair temp;
    temp.key = key_;
    temp.value = value_;
    data.push_back(temp);
}

auto INIFile::getSectionIteratorWithName(std::string &name)
{
    return std::find_if(sections.begin(), sections.end(),
                        [&name](const auto &sec) -> bool {
                            if (sec.getSectionName() == name)
                                return true;
                            return false;
                        });
}
const auto INIFile::getSectionIteratorWithName(std::string &name) const
{
    return std::find_if(sections.begin(), sections.end(),
                        [&name](const auto &sec) -> bool {
                            if (sec.getSectionName() == name)
                                return true;
                            return false;
                        });
}
INIFile::INIFile(std::string &code)
{
    std::string tempCode = removeUntil(code, '[');
    while (tempCode != "")
    {
        sections.push_back(INISection("[" + getUntil(tempCode, '[')));
        tempCode = removeUntil(code, '[');
    }
}
const INISection INIFile::getSection(std::string &sectionName) const
{
    return *getSectionIteratorWithName(sectionName);
}
INISection INIFile::getSection(std::string &sectionName)
{
    return *getSectionIteratorWithName(sectionName);
}
std::string INIFile::getValue(std::string &sectionName, std::string &valueName) const
{
    return getSectionIteratorWithName(sectionName)->getValue(valueName);
}
std::string INIFile::getValue(std::string &sectionName, std::string &valueName)
{
    return getSectionIteratorWithName(sectionName)->getValue(valueName);
}
std::string INIFile::setValue(std::string &sectionName, std::string &valueName, std::string &setTo)
{
    getSectionIteratorWithName(sectionName)->setValue(valueName, setTo);
}
std::string INIFile::getAsINI() const
{
    std::string temp = "; INI-FILE GENERATED BY wolfrINI. https://github.com/Wittmaxi/WolfrINI\n";
    for (const auto &i : sections)
        temp += i.getAsINI() + "\n";
    return temp;
}
void INIFile::addSection(INISection &section)
{
    sections.push_back(section);
}

} // namespace WINI